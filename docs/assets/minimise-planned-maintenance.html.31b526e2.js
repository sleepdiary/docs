import{_ as o,r as i,o as r,a as l,b as n,d as s,F as c,c as t,e}from"./app.562fc7a1.js";const d={},h=t('<h1 id="minimise-planned-maintenance" tabindex="-1"><a class="header-anchor" href="#minimise-planned-maintenance" aria-hidden="true">#</a> Minimise planned maintenance</h1><p>Planned maintenance is a window where we can make updates to the project that have a reasonable chance of causing problems for users or developers. For example, breaking the dashboard or causing GitHub actions to fail.</p><p>This page discusses ways to avoid planned maintenance, or at least reduce the amount of work that needs to be done during the maintenance window.</p><h2 id="general-guidelines" tabindex="-1"><a class="header-anchor" href="#general-guidelines" aria-hidden="true">#</a> General guidelines</h2><h3 id="test-on-a-personal-fork-when-possible" tabindex="-1"><a class="header-anchor" href="#test-on-a-personal-fork-when-possible" aria-hidden="true">#</a> Test on a personal fork when possible</h3><p>Sometimes you need to make changes to a repository that might fail. For example, GitHub actions generally can&#39;t be tested without being run on GitHub&#39;s own servers.</p>',6),p=e("Most changes can be made - or at least rehearsed - on a personal fork of the repository. Even if you need to test actions that look at the "),u=n("code",null,"main",-1),m=e(" branch, you can "),g={href:"https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History",target:"_blank",rel:"noopener noreferrer"},_=e("rewrite your fork's history"),b=e(" and rerun tests as often as you like."),f=n("h3",{id:"use-a-pre-release-label-for-live-testing",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#use-a-pre-release-label-for-live-testing","aria-hidden":"true"},"#"),e(" Use a "),n("code",null,"pre-release"),e(" label for live testing")],-1),k=e("Sometimes you need to build a package and push it to an external site. For example, you might want to build a new dev server and push an image to "),v={href:"https://hub.docker.com/u/sleepdiaryproject",target:"_blank",rel:"noopener noreferrer"},y=e("our Docker Hub site"),w=e("."),x=e("Most sites let you push pre-release versions of packages. In particular, packages that use "),M={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},T=e("semantic versioning"),F=e(" should use pre-release labels like "),j=n("code",null,"1.2.3-$COMMIT",-1),G=e(", while continuously-deployed packages should use a channel called "),H=n("code",null,"pre-release",-1),N=e("."),q=t(`<p>When you&#39;ve finished with the pre-release, you might be able to publish simply by relabelling it. Otherwise, you&#39;ll have to spend a little longer pushing the same binary again.</p><h3 id="use-guard-lines-to-avoid-merge-conflicts" tabindex="-1"><a class="header-anchor" href="#use-guard-lines-to-avoid-merge-conflicts" aria-hidden="true">#</a> Use guard lines to avoid merge conflicts</h3><p>Sometimes you need to manage changes that <code>git</code> can&#39;t merge automatically. For example, most repositories have a <code>.gitignore</code> file with lines in the <code>main</code> branch that are missing in the <code>built</code> branch.</p><p>Most merge conflicts can be avoided with a <em>guard line</em> for <code>git</code> to use:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;This line appears in one branch&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* this guard line appears in both branches */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&quot;This line appears in another branch&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Now you can modify or delete either line in either branch, and <code>git</code> will use the guard line to merge them automatically.</p>`,6);function E(I,S){const a=i("ExternalLinkIcon");return r(),l(c,null,[h,n("p",null,[p,u,m,n("a",g,[_,s(a)]),b]),f,n("p",null,[k,n("a",v,[y,s(a)]),w]),n("p",null,[x,n("a",M,[T,s(a)]),F,j,G,H,N]),q],64)}var B=o(d,[["render",E],["__file","minimise-planned-maintenance.html.vue"]]);export{B as default};
