import{_ as r,r as s,o as l,a,b as e,d as n,w as c,F as d,e as t,c as h}from"./app.0c7c1f85.js";const u={},_=e("h1",{id:"common-procedures",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#common-procedures","aria-hidden":"true"},"#"),t(" Common procedures")],-1),p=e("p",null,"Some jobs need to be done frequently, and involve a detailed procedure that hasn't been automated for whatever reason. This page contains step-by-step instructions to do those jobs.",-1),m=e("h2",{id:"run-a-planned-maintenance",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#run-a-planned-maintenance","aria-hidden":"true"},"#"),t(" Run a planned maintenance")],-1),b={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+TODO%3A+purpose+of+this+maintenance",target:"_blank",rel:"noopener noreferrer"},f=t("Create a new maintenance issue"),g=t(" and follow the steps described in the template."),y=h('<h2 id="fix-a-built-branch" tabindex="-1"><a class="header-anchor" href="#fix-a-built-branch" aria-hidden="true">#</a> Fix a <code>built</code> branch</h2><p>When you have a merge failure in the <code>built</code> branch, see if you can fix it with a guard line. If so, use the following procedure:</p><ol><li>create a PR in the <code>main</code> branch that adds a guard line but <em>does not</em> include the conflicting PR</li><li>merge the guard line into the <code>built</code> branch</li><li>rebase the conflicting PR on top of the new <code>main</code> branch</li><li>accept the (no longer conflicting) PR</li></ol><p>If you can resolve a merge conflict with the procedure above, there&#39;s no need to schedule a planned maintenance. Otherwise:</p>',4),w=e("li",null,[t("create a new PR that merges the existing PR into the "),e("code",null,"built"),t(" branch")],-1),k=e("li",null,"test both thoroughly in a personal repo",-1),v=t("once everything works, "),x={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Fix+the+built+branch",target:"_blank",rel:"noopener noreferrer"},R=t("create a new planned maintenance issue"),P=t(" with steps like: "),T=e("ol",null,[e("li",null,[t("merge the "),e("code",null,"built"),t(" PR into main first")]),e("li",null,"then merge the conflicting PR"),e("li",null,[t("check the normal workflow merges back correctly "),e("ul",null,[e("li",null,[t("it will fail if you merged the "),e("code",null,"built"),t(" PR after the original PR")])])])],-1),q=e("h2",{id:"update-dependency-versions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#update-dependency-versions","aria-hidden":"true"},"#"),t(" Update dependency versions")],-1),A=e("p",null,"To keep the build system as standard as possible, all dependencies need to be cached in the build image. That means that when you update the dependencies of a package, you need to update the build system as well. This can cause hard-to-test problems, because commands occasionally succeed on the dev-server but fail in production due to some quirk of GitHub Actions configuration. To minimise that risk, use the following procedure:",-1),G=t("run "),C={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/upgrade-dependencies.sh",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"upgrade-dependencies.sh",-1),F=e("ul",null,[e("li",null,"this script has yet to be tested in a live environment - read through it and look for bugs first"),e("li",null,"this will create several pull requests that will be used in later steps")],-1),H=e("li",null,[t("accept the pull request for "),e("code",null,"internal-tools"),t(" (guaranteed to run last in the script above)")],-1),L=t("wait for "),N={href:"https://github.com/sleepdiary/internal-tools/actions/workflows/main.yml",target:"_blank",rel:"noopener noreferrer"},U=t("the relevant action"),V=t(" to build "),j=e("code",null,"pre-release",-1),B=t(" versions of the build system and dev-server"),E=t("check the new dev-server works as expected "),O=t("run "),S={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-dev-server.sh",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"check-dev-server.sh",-1),D=t(" once to check everything"),z=t("push a test-commit for every repository that uses the build system "),J=t("run "),K={href:"https://github.com/sleepdiary/internal-tools/blob/main/bin/check-prerelease-build-system.sh",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"check-prerelease-build-system.sh",-1),Q=t(" once in each repository that was updated"),X={href:"https://github.com/sleepdiary/internal-tools/compare/latest...main?expand=1",target:"_blank",rel:"noopener noreferrer"},Y=t("create an "),Z=e("code",null,"internal-tools",-1),$=t(" PR to pull into latest from main"),ee=t(' with message "Recent changes"'),te={href:"https://github.com/sleepdiary/internal-tools/issues/new?assignees=&labels=planned-maintenance&template=planned-maintenance.md&title=Planned+maintenance%3A+Update+dependencies+for+every+repository",target:"_blank",rel:"noopener noreferrer"},ne=t("Run a planned maintenance"),oe=t(" to accept all the PRs generated above "),se={href:"https://github.com/sleepdiary/internal-tools/issues?q=label%3Aplanned-maintenance",target:"_blank",rel:"noopener noreferrer"},ie=t("see previous planned maintenances"),re=t("add the PRs above to "),le={href:"https://github.com/sleepdiary/planned-maintenance-info/edit/main/index.js",target:"_blank",rel:"noopener noreferrer"},ae=t("the maintenace actions"),ce=e("h2",{id:"update-docs-from-resources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#update-docs-from-resources","aria-hidden":"true"},"#"),t(" Update docs from resources")],-1),de=t('Some files in the "docs" repo are generated automatically using files from the "resources" repo. This could be triggered automatically using '),he={href:"https://github.com/peter-evans/repository-dispatch",target:"_blank",rel:"noopener noreferrer"},ue=t("a special GitHub Actions script"),_e=t(", but GitHub's relatively coarse permissions system means it would require careful design. Until then, we put up with triggering events manually:"),pe=t("Go to "),me={href:"https://github.com/sleepdiary/docs/actions/workflows/generate-from-resources.yml",target:"_blank",rel:"noopener noreferrer"},be=t('the "Generate from resources" action'),fe=e("li",null,'click "Run workflow" (to the right "This workflow has a workflow_dispatch event trigger")',-1),ge=e("li",null,'click the green "Run workflow" button',-1),ye=e("li",null,"wait for the workflow to complete",-1),we=t("go to "),ke={href:"https://github.com/sleepdiary/docs/pulls",target:"_blank",rel:"noopener noreferrer"},ve=t("the list of pull requests"),xe=e("li",null,"review and accept the PR created by the workflow",-1),Re=e("h2",{id:"create-a-new-repository",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#create-a-new-repository","aria-hidden":"true"},"#"),t(" Create a new repository")],-1),Pe=e("li",null,"make a personal repository that will be the basis for the new repository",-1),Te=e("li",null,[t("create a minimum viable product "),e("ul",null,[e("li",null,"push any commits"),e("li",null,"add repository metadata"),e("li",null,"configure GitHub Pages")])],-1),qe=e("li",null,[t("check everything looks right "),e("ul",null,[e("li",null,"remove any branches that shouldn't go in the main repository"),e("li",null,'make sure all the branch histories look nice (e.g. remove "fixup" and "WIP" commits)')])],-1),Ae={href:"https://docs.github.com/en/repositories/creating-and-managing-repositories/transferring-a-repository",target:"_blank",rel:"noopener noreferrer"},Ge=t("transfer the repository to sleepdiary"),Ce=e("li",null,"fork a new personal repo from the moved repository",-1),Ie=t("edit your "),Fe=e("code",null,".gitconfig",-1);function He(Le,Ne){const o=s("ExternalLinkIcon"),i=s("RouterLink");return l(),a(d,null,[_,p,m,e("p",null,[e("a",b,[f,n(o)]),g]),y,e("ol",null,[w,k,e("li",null,[v,e("a",x,[R,n(o)]),P,T])]),q,A,e("ol",null,[e("li",null,[G,e("a",C,[I,n(o)]),F]),H,e("li",null,[L,e("a",N,[U,n(o)]),V,j,B]),e("li",null,[E,e("ul",null,[e("li",null,[O,e("a",S,[W,n(o)]),D])])]),e("li",null,[z,e("ul",null,[e("li",null,[J,e("a",K,[M,n(o)]),Q])])]),e("li",null,[e("a",X,[Y,Z,$,n(o)]),ee]),e("li",null,[e("a",te,[ne,n(o)]),oe,e("ul",null,[e("li",null,[e("a",se,[ie,n(o)])]),e("li",null,[re,e("a",le,[ae,n(o)])])])])]),ce,e("p",null,[de,e("a",he,[ue,n(o)]),_e]),e("ol",null,[e("li",null,[pe,e("a",me,[be,n(o)])]),fe,ge,ye,e("li",null,[we,e("a",ke,[ve,n(o)])]),xe]),Re,e("ol",null,[Pe,Te,qe,e("li",null,[e("a",Ae,[Ge,n(o)])]),Ce,e("li",null,[n(i,{to:"/contribute/optimise-your-environment.html#git-repositories"},{default:c(()=>[Ie,Fe]),_:1})])])],64)}var Ve=r(u,[["render",He],["__file","common-procedures.html.vue"]]);export{Ve as default};
